# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for Sundials 2.7.0 (https://computation.llnl.gov/projects/sundials)
# 
# All rights reserved.
# 
# For details, see the Sundials LICENSE file.
# SPDX-License-Identifier: BSD-3-Clause
diff -urpN sundials-2.7.0-orig/include/ida/ida.h sundials-2.7.0/include/ida/ida.h
--- sundials-2.7.0-orig/include/ida/ida.h	2018-04-04 19:10:30.473103574 +0200
+++ sundials-2.7.0/include/ida/ida.h	2018-04-04 19:10:44.910212383 +0200
@@ -263,7 +263,11 @@ SUNDIALS_EXPORT void *IDACreate(void);
  *                      |                                          
  * IDASetInitStep       | initial step size.                      
  *                      | [estimated by IDA]                       
- *                      |                                          
+ *                      |
+ * IDASetMinStep        | minimum absolute value of step size
+ *                      | allowd.
+ *                      | [0]
+ *                      |                     
  * IDASetMaxStep        | maximum absolute value of step size     
  *                      | allowed.                                
  *                      | [infinity]                              
@@ -350,6 +354,7 @@ SUNDIALS_EXPORT int IDASetUserData(void
 SUNDIALS_EXPORT int IDASetMaxOrd(void *ida_mem, int maxord);
 SUNDIALS_EXPORT int IDASetMaxNumSteps(void *ida_mem, long int mxsteps);
 SUNDIALS_EXPORT int IDASetInitStep(void *ida_mem, realtype hin);
+SUNDIALS_EXPORT int IDASetMinStep(void *ida_mem, realtype hmin);
 SUNDIALS_EXPORT int IDASetMaxStep(void *ida_mem, realtype hmax);
 SUNDIALS_EXPORT int IDASetStopTime(void *ida_mem, realtype tstop);
 SUNDIALS_EXPORT int IDASetNonlinConvCoef(void *ida_mem, realtype epcon);
diff -urpN sundials-2.7.0-orig/include/kinsol/kinsol.h sundials-2.7.0/include/kinsol/kinsol.h
--- sundials-2.7.0-orig/include/kinsol/kinsol.h	2018-04-04 19:10:30.479103619 +0200
+++ sundials-2.7.0/include/kinsol/kinsol.h	2018-04-04 19:11:01.804339711 +0200
@@ -727,6 +727,11 @@ SUNDIALS_EXPORT int KINSol(void *kinmem,
  * KINGetReturnFlagName      | returns the name of the constant
  *                           | associated with a KINSOL return flag
  *                           |
+ * KINGetResiduals           | returns the results of non linear
+ *                           | system function
+ *                           |
+ * KINGetWeights             | returns the scaling vectors associated
+ *                           | to the residual functions
  * -----------------------------------------------------------------
  *
  * The possible return values for the KINSet* subroutines are the
@@ -748,6 +753,8 @@ SUNDIALS_EXPORT int KINGetNumBacktrackOp
 SUNDIALS_EXPORT int KINGetFuncNorm(void *kinmem, realtype *fnorm);
 SUNDIALS_EXPORT int KINGetStepLength(void *kinmem, realtype *steplength);
 SUNDIALS_EXPORT char *KINGetReturnFlagName(long int flag);
+SUNDIALS_EXPORT int KINGetResiduals(void *kinmem, N_Vector fvalues);
+SUNDIALS_EXPORT int KINGetWeights(void *kinmem, N_Vector weights);
 
 /*
  * -----------------------------------------------------------------
diff -urpN sundials-2.7.0-orig/src/ida/ida.c sundials-2.7.0/src/ida/ida.c
--- sundials-2.7.0-orig/src/ida/ida.c	2018-04-04 19:10:30.519103921 +0200
+++ sundials-2.7.0/src/ida/ida.c	2018-04-04 19:11:23.599503976 +0200
@@ -326,6 +326,7 @@ void *IDACreate(void)
   IDA_mem->ida_maxord      = MAXORD_DEFAULT;
   IDA_mem->ida_mxstep      = MXSTEP_DEFAULT;
   IDA_mem->ida_hmax_inv    = HMAX_INV_DEFAULT;
+  IDA_mem->ida_hmin        = ZERO;
   IDA_mem->ida_hin         = ZERO;
   IDA_mem->ida_epcon       = EPCON;
   IDA_mem->ida_maxnef      = MXNEF;
@@ -910,6 +911,7 @@ int IDARootInit(void *ida_mem, int nrtfn
 #define mxstep      (IDA_mem->ida_mxstep)
 #define hin         (IDA_mem->ida_hin)
 #define hmax_inv    (IDA_mem->ida_hmax_inv)
+#define hmin        (IDA_mem->ida_hmin)
 #define tstop       (IDA_mem->ida_tstop)
 #define tstopset    (IDA_mem->ida_tstopset)
 #define epcon       (IDA_mem->ida_epcon)
@@ -2648,6 +2650,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem
          Note that if nflag=IDA_CONSTR_RECVR then rr was already set in IDANls */
       if (nflag != IDA_CONSTR_RECVR) rr = QUARTER;
       hh *= rr;
+      hh = SUNMAX(hh,hmin);
 
       /* Test if there were too many convergence failures */
       if (*ncfPtr < maxncf)               return(PREDICT_AGAIN);
@@ -2676,6 +2679,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem
       rr = PT9 * SUNRpowerR( TWO * err_knew + PT0001,(-ONE/(kk+1)) );
       rr = SUNMAX(QUARTER, SUNMIN(PT9,rr));
       hh *=rr;
+      hh = SUNMAX(hh,hmin);
       return(PREDICT_AGAIN);
       
     } else if (*nefPtr == 2) {
@@ -2686,6 +2690,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem
       kk = knew;
       rr = QUARTER;
       hh *= rr;
+      hh = SUNMAX(hh,hmin);
       return(PREDICT_AGAIN);
       
     } else if (*nefPtr < maxnef) {
@@ -2695,6 +2700,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem
       kk = 1;
       rr = QUARTER;
       hh *= rr;
+      hh = SUNMAX(hh,hmin);
       return(PREDICT_AGAIN);
 
     } else {
@@ -3027,7 +3033,10 @@ static int IDARcheck2(IDAMem IDA_mem)
   if (irfnd == 0) return(IDA_SUCCESS);
 
   (void) IDAGetSolution(IDA_mem, tlo, yy, yp);
-  retval = gfun (tlo, yy, yp, glo, user_data);  
+  //retval = gfun (tlo, yy, yp, glo, user_data);  
+  // use of temporary variable (trout,grout) to detect sign change of g
+  trout = tlo;
+  retval = gfun (trout, yy, yp, grout, user_data);
   nge++;
   if (retval != 0) return(IDA_RTFUNC_FAIL);
 
@@ -3035,7 +3044,7 @@ static int IDARcheck2(IDAMem IDA_mem)
   for (i = 0; i < nrtfn; i++) iroots[i] = 0;
   for (i = 0; i < nrtfn; i++) {
     if (!gactive[i]) continue;
-    if (SUNRabs(glo[i]) == ZERO) {
+    if (SUNRabs(grout[i]) == ZERO) {
       zroot = TRUE;
       iroots[i] = 1;
     }
@@ -3065,6 +3074,10 @@ static int IDARcheck2(IDAMem IDA_mem)
       if (iroots[i] == 1) return(CLOSERT);
       zroot = TRUE;
       iroots[i] = 1;
+    } 
+    else if (grout[i]*glo[i] < ZERO) {
+      zroot = TRUE;
+      iroots[i] = grout[i] > 0 ? -1 : 1;
     } else {
       if (iroots[i] == 1) glo[i] = ghi[i];
     }
diff -urpN sundials-2.7.0-orig/src/ida/ida_impl.h sundials-2.7.0/src/ida/ida_impl.h
--- sundials-2.7.0-orig/src/ida/ida_impl.h	2018-04-04 19:10:30.521103936 +0200
+++ sundials-2.7.0/src/ida/ida_impl.h	2018-04-04 19:12:47.051132934 +0200
@@ -165,6 +165,7 @@ typedef struct IDAMemRec {
   int ida_maxord_alloc;  /* value of maxord used when allocating memory       */
   long int ida_mxstep;   /* max number of internal steps for one user call    */
   realtype ida_hmax_inv; /* inverse of max. step size hmax (default = 0.0)    */
+  realtype ida_hmin;     /* min value of step size                            */
 
   /* Counters */
 
@@ -476,6 +477,7 @@ void IDAErrHandler(int error_code, const
 #define MSG_NEG_MAXORD     "maxord <= 0 illegal."
 #define MSG_BAD_MAXORD     "Illegal attempt to increase maximum order."
 #define MSG_NEG_HMAX       "hmax < 0 illegal."
+#define MSG_NEG_HMIN       "hmin < 0 illegal."
 #define MSG_NEG_EPCON      "epcon <= 0.0 illegal."
 #define MSG_BAD_CONSTR     "Illegal values in constraints vector."
 #define MSG_BAD_EPICCON    "epiccon <= 0.0 illegal."
diff -urpN sundials-2.7.0-orig/src/ida/ida_io.c sundials-2.7.0/src/ida/ida_io.c
--- sundials-2.7.0-orig/src/ida/ida_io.c	2018-04-04 19:10:30.519103921 +0200
+++ sundials-2.7.0/src/ida/ida_io.c	2018-04-04 19:13:15.569347869 +0200
@@ -176,6 +176,32 @@ int IDASetInitStep(void *ida_mem, realty
 
 /*-----------------------------------------------------------------*/
 
+int IDASetMinStep(void *ida_mem, realtype hmin)
+{
+  IDAMem IDA_mem;
+  
+  if (ida_mem==NULL){
+    IDAProcessError(NULL, IDA_MEM_NULL, "IDA", "IDASetMinStep", MSG_NO_MEM);
+    return(IDA_MEM_NULL);
+  }
+  
+  IDA_mem = (IDAMem) ida_mem;
+  
+  if (hmin < 0) {
+    IDAProcessError(IDA_mem, IDA_ILL_INPUT, "IDA", "IDASetMinStep", MSG_NEG_HMIN);
+    return(IDA_ILL_INPUT);
+  }
+  
+  if( hmin == ZERO ){
+    IDA_mem->ida_hmin = ZERO;
+    return (IDA_SUCCESS);
+  }
+  IDA_mem->ida_hmin = hmin;
+  return (IDA_SUCCESS);
+}
+
+/*-----------------------------------------------------------------*/
+
 int IDASetMaxStep(void *ida_mem, realtype hmax)
 {
   IDAMem IDA_mem;
diff -urpN sundials-2.7.0-orig/src/kinsol/kinsol_io.c sundials-2.7.0/src/kinsol/kinsol_io.c
--- sundials-2.7.0-orig/src/kinsol/kinsol_io.c	2018-04-04 19:10:30.532104018 +0200
+++ sundials-2.7.0/src/kinsol/kinsol_io.c	2018-04-04 19:13:54.944644633 +0200
@@ -835,6 +835,8 @@ int KINSetSysFunc(void *kinmem, KINSysFn
 #define fnorm (kin_mem->kin_fnorm)
 #define liw (kin_mem->kin_liw)
 #define lrw (kin_mem->kin_lrw)
+#define fval (kin_mem->kin_fval)
+#define fscale (kin_mem->kin_fscale)
 
 /* 
  * =================================================================
@@ -1058,3 +1060,39 @@ char *KINGetReturnFlagName(long int flag
 
   return(name);
 }
+
+/*
+ * -----------------------------------------------------------------
+ * Function : KINGetResiduals
+ * -----------------------------------------------------------------
+ */
+
+int KINGetResiduals(void *kinmem, N_Vector fvalues)
+{
+  KINMem kin_mem;
+
+  if (kinmem == NULL) {
+    KINProcessError(NULL, KIN_MEM_NULL, "KINSOL", "KINGetResidualFunctionValues", MSG_NO_MEM);
+    return(KIN_MEM_NULL);
+  }
+
+  kin_mem = (KINMem) kinmem;
+  N_VScale(ONE, fval, fvalues);
+
+  return(KIN_SUCCESS);
+}
+
+int KINGetWeights(void *kinmem, N_Vector weights)
+{
+  KINMem kin_mem;
+
+  if (kinmem == NULL) {
+    KINProcessError(NULL, KIN_MEM_NULL, "KINSOL", "KINGetWeights", MSG_NO_MEM);
+    return(KIN_MEM_NULL);
+  }
+
+  kin_mem = (KINMem) kinmem;
+  N_VScale(ONE, fscale, weights);
+
+  return(KIN_SUCCESS);
+}
diff -urpN sundials-2.7.0-orig/src/kinsol/kinsol_sparse.c sundials-2.7.0/src/kinsol/kinsol_sparse.c
--- sundials-2.7.0-orig/src/kinsol/kinsol_sparse.c	2018-04-04 19:10:30.537104056 +0200
+++ sundials-2.7.0/src/kinsol/kinsol_sparse.c	2018-04-04 19:14:06.075728525 +0200
@@ -73,6 +73,7 @@ int KINSlsSetSparseJacFn(void *kin_mem_v
   kinsls_mem = (KINSlsMem) kin_mem->kin_lmem;
 
   kinsls_mem->s_jaceval = jac;
+  kinsls_mem->s_nje = 0;
 
   return(KINSLS_SUCCESS);
 }
