# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for OpenModelica 1.9.4 (https://www.openmodelica.org)
# 
# All rights reserved.
# 
# THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
# THIS OSMC PUBLIC LICENSE (OSMC-PL) VERSION 1.2.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
# OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
# 
# The OpenModelica software and the Open Source Modelica
# Consortium (OSMC) Public License (OSMC-PL) are obtained
# from OSMC, either from the above address,
# from the URLs: http://www.ida.liu.se/projects/OpenModelica or
# http://www.openmodelica.org, and in the OpenModelica distribution.
# GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
# 
# This program is distributed WITHOUT ANY WARRANTY; without
# even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
# IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
# 
# See the full OSMC Public License conditions for more details.
# SPDX-License-Identifier: GPL-3.0 OR LicenseRef-OSMC-PL
Index: OMCompiler/Compiler/Template/CodegenCFunctions.tpl
===================================================================
--- OMCompiler/Compiler/Template/CodegenCFunctions.tpl	(r√©vision 8)
+++ OMCompiler/Compiler/Template/CodegenCFunctions.tpl	(copie de travail)
@@ -1495,6 +1495,7 @@
   {
     return mmc_mk_box<%start%>3, &<%fname%>__desc<%funArgsStr%>);
   }
+  <%\n%>
   >>
 end boxRecordConstructor;
 
@@ -3958,8 +3959,6 @@
     <<
     if(!(<%condVar%>))
     {
-      FILE_INFO info = {<%infoArgs(info)%>};
-      omc_assert_warning(info, "The following assertion has been violated %sat time %f", initial() ? "during initialization " : "", data->localData[0]->timeValue);
       throwStreamPrintWithEquationIndexes(threadData, equationIndexes, <%msgVar%>);
     }
     >>
@@ -4775,12 +4774,7 @@
   case POW(__) then
     if isHalf(exp2) then
       let tmp = tempDecl(expTypeFromExpModelica(exp1),&varDecls)
-      let &preExp +=
-        <<
-        <%tmp%> = <%e1%>;
-        <%assertCommonVar('<%tmp%> >= 0.0', '"Model error: Argument of sqrt(<%Util.escapeModelicaStringToCString(printExpStr(exp1))%>) was %g should be >= 0", <%tmp%>', context, &varDecls, dummyInfo)%>
-        >>
-      'sqrt(<%tmp%>)'
+      'sqrt(<%e1%>)'
     else match realExpIntLit(exp2)
       case SOME(2) then
         let tmp = tempDecl("modelica_real", &varDecls)
@@ -4799,73 +4793,8 @@
           >>
         '(<%tmp%> * <%tmp%>)'
       case SOME(i) then 'real_int_pow(threadData, <%e1%>, <%i%>)'
-      else
-        let tmp1 = tempDecl("modelica_real", &varDecls)
-        let tmp2 = tempDecl("modelica_real", &varDecls)
-        let tmp3 = tempDecl("modelica_real", &varDecls)
-        let tmp4 = tempDecl("modelica_real", &varDecls) //fractpart
-        let tmp5 = tempDecl("modelica_real", &varDecls) //intpart
-        let tmp6 = tempDecl("modelica_real", &varDecls) //intpart
-        let tmp7 = tempDecl("modelica_real", &varDecls) //fractpart
-        let &preExp +=
-          <<
-          <%tmp1%> = <%e1%>;
-          <%tmp2%> = <%e2%>;
-          if(<%tmp1%> < 0.0 && <%tmp2%> != 0.0)
-          {
-            <%tmp4%> = modf(<%tmp2%>, &<%tmp5%>);
-
-            if(<%tmp4%> > 0.5)
-            {
-              <%tmp4%> -= 1.0;
-              <%tmp5%> += 1.0;
-            }
-            else if(<%tmp4%> < -0.5)
-            {
-              <%tmp4%> += 1.0;
-              <%tmp5%> -= 1.0;
-            }
-
-            if(fabs(<%tmp4%>) < 1e-10)
-              <%tmp3%> = pow(<%tmp1%>, <%tmp5%>);
-            else
-            {
-              <%tmp7%> = modf(1.0/<%tmp2%>, &<%tmp6%>);
-              if(<%tmp7%> > 0.5)
-              {
-                <%tmp7%> -= 1.0;
-                <%tmp6%> += 1.0;
-              }
-              else if(<%tmp7%> < -0.5)
-              {
-                <%tmp7%> += 1.0;
-                <%tmp6%> -= 1.0;
-              }
-              if(fabs(<%tmp7%>) < 1e-10 && ((unsigned long)<%tmp6%> & 1))
-              {
-                <%tmp3%> = -pow(-<%tmp1%>, <%tmp4%>)*pow(<%tmp1%>, <%tmp5%>);
-              }
-              else
-              {
-                <%if acceptMetaModelicaGrammar()
-                  then '<%generateThrow()%>;<%\n%>'
-                  else 'throwStreamPrint(threadData, "Invalid root: (%g)^(%g)", <%tmp1%>, <%tmp2%>);<%\n%>'%>
-              }
-            }
-          }
-          else
-          {
-            <%tmp3%> = pow(<%tmp1%>, <%tmp2%>);
-          }
-          if(isnan(<%tmp3%>) || isinf(<%tmp3%>))
-          {
-            <%if acceptMetaModelicaGrammar()
-              then '<%generateThrow()%>;<%\n%>'
-              else 'throwStreamPrint(threadData, "Invalid root: (%g)^(%g)", <%tmp1%>, <%tmp2%>);<%\n%>'%>
-          }
-          >>
-        '<%tmp3%>'
-
+      else 'pow(<%e1%>, <%e2%>)'
+     
   case UMINUS(__) then daeExpUnary(exp, context, &preExp, &varDecls, &auxFunction)
   case ADD_ARR(__) then
     let type = match ty case T_ARRAY(ty=T_INTEGER(__)) then "integer_array"
@@ -5241,7 +5170,7 @@
   let eThen = daeExp(expThen, context, &preExpThen, &varDecls, &auxFunction)
   let &preExpElse = buffer ""
   let eElse = daeExp(expElse, context, &preExpElse, &varDecls, &auxFunction)
-  let shortIfExp = if preExpThen then "" else if preExpElse then "" else if isArrayType(typeof(exp)) then "" else "x"
+  let shortIfExp = "" 
   (if shortIfExp
     then
       // Safe to do if eThen and eElse don't emit pre-expressions
@@ -5395,7 +5324,7 @@
       case FUNCTION_CONTEXT(__)
       case PARALLEL_FUNCTION_CONTEXT(__) then
         'DIVISION(<%var1%>,<%var2%>,"<%var3%>")'
-      else
+       else
         'DIVISION_SIM(<%var1%>,<%var2%>,"<%var3%>",equationIndexes)'
     )
 
@@ -5468,7 +5397,16 @@
   case CALL(path=IDENT(name="max"), attr=CALL_ATTR(ty = T_REAL(__)), expLst={e1,e2}) then
     let var1 = daeExp(e1, context, &preExp, &varDecls, &auxFunction)
     let var2 = daeExp(e2, context, &preExp, &varDecls, &auxFunction)
-    'fmax(<%var1%>,<%var2%>)'
+    let tmp = tempDecl(expTypeFromExpModelica(e1), &varDecls)
+    let &preExp +=    
+    <<
+    if ( <%var1%> > <%var2%> )
+     <%tmp%> = <%var1%>;
+    else
+     <%tmp%> = <%var2%>;
+     <%\n%>
+     >>
+    '<%tmp%>'
 
   case CALL(path=IDENT(name="max"), expLst={e1,e2}) then
     let var1 = daeExp(e1, context, &preExp, &varDecls, &auxFunction)
@@ -5483,7 +5421,16 @@
   case CALL(path=IDENT(name="min"), attr=CALL_ATTR(ty = T_REAL(__)), expLst={e1,e2}) then
     let var1 = daeExp(e1, context, &preExp, &varDecls, &auxFunction)
     let var2 = daeExp(e2, context, &preExp, &varDecls, &auxFunction)
-    'fmin(<%var1%>,<%var2%>)'
+    let tmp = tempDecl(expTypeFromExpModelica(e1), &varDecls)
+    let &preExp +=    
+    <<
+    if ( <%var1%> > <%var2%> )
+     <%tmp%> = <%var2%>;
+    else
+     <%tmp%> = <%var1%>;
+     <%\n%>
+     >>
+    '<%tmp%>'
 
   case CALL(path=IDENT(name="min"), expLst={e1,e2}) then
     let var1 = daeExp(e1, context, &preExp, &varDecls, &auxFunction)
@@ -5505,7 +5452,7 @@
         'sqrt(<%argStr%>)'
       else
         let tmp = tempDecl(expTypeFromExpModelica(e1), &varDecls)
-        let &preExp +=
+	let &preExp +=
           <<
           <%tmp%> = <%argStr%>;
           <%assertCommonVar('<%tmp%> >= 0.0', '"Model error: Argument of sqrt(<%Util.escapeModelicaStringToCString(printExpStr(e1))%>) was %g should be >= 0", <%tmp%>', context, &varDecls, dummyInfo)%>
