# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for OpenModelica 1.9.4 (https://www.openmodelica.org)
# 
# All rights reserved.
# 
# THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
# THIS OSMC PUBLIC LICENSE (OSMC-PL) VERSION 1.2.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
# OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
# 
# The OpenModelica software and the Open Source Modelica
# Consortium (OSMC) Public License (OSMC-PL) are obtained
# from OSMC, either from the above address,
# from the URLs: http://www.ida.liu.se/projects/OpenModelica or
# http://www.openmodelica.org, and in the OpenModelica distribution.
# GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
# 
# This program is distributed WITHOUT ANY WARRANTY; without
# even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
# IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
# 
# See the full OSMC Public License conditions for more details.
# SPDX-License-Identifier: GPL-3.0 OR LicenseRef-OSMC-PL
Index: OMCompiler/Compiler/Template/CodegenC.tpl
===================================================================
--- OMCompiler/Compiler/Template/CodegenC.tpl	(rÃ©vision 12)
+++ OMCompiler/Compiler/Template/CodegenC.tpl	(copie de travail)
@@ -1107,7 +1107,7 @@
     %>
 
     data->modelData->nStates = <%varInfo.numStateVars%>;
-    data->modelData->nVariablesReal = 2*<%varInfo.numStateVars%>+<%varInfo.numAlgVars%>+<%varInfo.numDiscreteReal%>+<%varInfo.numOptimizeConstraints%> + <%varInfo.numOptimizeFinalConstraints%>;
+    data->modelData->nVariablesReal = <%varInfo.numStateVars%>+<%varInfo.numAlgVars%>+<%varInfo.numOptimizeConstraints%> + <%varInfo.numOptimizeFinalConstraints%>;
     data->modelData->nDiscreteReal = <%varInfo.numDiscreteReal%>;
     data->modelData->nVariablesInteger = <%varInfo.numIntAlgVars%>;
     data->modelData->nVariablesBoolean = <%varInfo.numBoolAlgVars%>;
@@ -1209,36 +1209,41 @@
   match modelInfo
     case MODELINFO(varInfo=VARINFO(numStateVars=numStateVars, numAlgVars= numAlgVars, numDiscreteReal=numDiscreteReal, numOptimizeConstraints=numOptimizeConstraints, numOptimizeFinalConstraints=numOptimizeFinalConstraints), vars=SIMVARS(__)) then
       <<
+      /* StatesDerivatives */
+      <%vars.derivativeVars |> var =>
+        globalDataVarDefine(var, "derivativesVars", 0)
+      ;separator="\n"%>
+      
       /* States */
       <%vars.stateVars |> var =>
         globalDataVarDefine(var, "realVars", 0)
       ;separator="\n"%>
-
-      /* StatesDerivatives */
-      <%vars.derivativeVars |> var =>
-        globalDataVarDefine(var, "realVars", numStateVars)
-      ;separator="\n"%>
-
+      
       /* Non Discrete Real Algebraic Vars */
       <%vars.algVars |> var =>
-        globalDataVarDefine(var, "realVars", intMul(2, numStateVars) )
+        globalDataVarDefine(var, "realVars", numStateVars )
       ;separator="\n"%>
 
-      /* Discrete Real Algebraic Vars */
-      <%vars.discreteAlgVars |> var =>
-        globalDataVarDefine(var, "realVars", intAdd(intMul(2, numStateVars),numAlgVars))
-      ;separator="\n"%>
-
       /* Nonlinear Constraints For Dyn. Optimization */
       <%vars.realOptimizeConstraintsVars |> var =>
-        globalDataVarDefine(var, "realVars", intAdd(intAdd(intMul(2, numStateVars),numAlgVars), numDiscreteReal))
+        globalDataVarDefine(var, "realVars", intAdd(numStateVars,numAlgVars))
       ;separator="\n"%>
 
       /* Nonlinear Final Constraints For Dyn. Optimization */
       <%vars.realOptimizeFinalConstraintsVars |> var =>
-        globalDataVarDefine(var, "realVars", intAdd(intAdd(intMul(2, numStateVars),numAlgVars), intAdd(numDiscreteReal,numOptimizeConstraints)))
+        globalDataVarDefine(var, "realVars", intAdd(intAdd(numStateVars,numAlgVars), numOptimizeConstraints))
       ;separator="\n"%>
 
+      /* Discrete Real Algebraic Vars */
+      <%vars.discreteAlgVars |> var =>
+        globalDataVarDefine(var, "discreteVars", 0 )
+      ;separator="\n"%>
+
+      /* Algebraic Integer Vars */
+      <%vars.intAlgVars |> var =>
+        globalDataVarDefine(var, "integerDoubleVars", 0)
+      ;separator="\n"%>
+
       /* Algebraic Parameter */
       <%vars.paramVars |> var =>
         globalDataParDefine(var, "realParameter")
@@ -1249,11 +1254,6 @@
         globalDataParDefine(var, "extObjs")
       ;separator="\n"%>
 
-      /* Algebraic Integer Vars */
-      <%vars.intAlgVars |> var =>
-        globalDataVarDefine(var, "integerVars",0)
-      ;separator="\n"%>
-
       /* Algebraic Integer Parameter */
       <%vars.intParamVars |> var =>
         globalDataParDefine(var, "integerParameter")
